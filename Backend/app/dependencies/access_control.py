# üìÅ app/dependencies/access_control.py

import logging
from fastapi import Depends, HTTPException, status
from app.auth.dependencies import get_current_user
from app.models.user import User, UserRole

logger = logging.getLogger(__name__)

# üìå Conta de testes (admin liberado por email)
ADMIN_EMAIL = "elgn@tech.com"

# === üîí Requer plano pago (Pro, Premium, Empresarial) ===
def require_paid_plan(user: User = Depends(get_current_user)) -> User:
    if user.email == ADMIN_EMAIL or user.role == UserRole.ADMIN:
        return user  # üîì Libera admins independente do plano
    if not user.plan or user.plan.name.lower() in ("basic", "basic anual"):
        logger.warning(f"[Access Denied] Plano gratuito: {user.username}")
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="üîí Este recurso est√° dispon√≠vel apenas para planos pagos."
        )
    return user

# === ‚ú® Requer plano Premium ou Empresarial ===
def require_premium_plan(user: User = Depends(get_current_user)) -> User:
    if user.email == ADMIN_EMAIL or user.role == UserRole.ADMIN:
        return user
    allowed = ("premium", "premium anual", "empresarial", "empresarial anual")
    if not user.plan or user.plan.name.lower() not in allowed:
        logger.warning(f"[Access Denied] Plano insuficiente: {user.username} ({user.plan.name if user.plan else 'Nenhum'})")
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="‚ú® Este recurso √© exclusivo para usu√°rios Premium ou Empresarial."
        )
    return user

# === üõ°Ô∏è Requer fun√ß√£o ADMIN ===
def require_admin_role(user: User = Depends(get_current_user)) -> User:
    if user.email == ADMIN_EMAIL or user.role == UserRole.ADMIN:
        return user
    logger.warning(f"[Access Denied] Sem permiss√£o de admin: {user.username}")
    raise HTTPException(
        status_code=status.HTTP_403_FORBIDDEN,
        detail="üîê Acesso restrito para administradores."
    )

# === üü¢ Requer assinatura ativa ===
def require_active_subscription(user: User = Depends(get_current_user)) -> User:
    if user.email == ADMIN_EMAIL or user.role == UserRole.ADMIN:
        return user
    if not user.subscription or user.subscription.status.lower() != "active":
        logger.warning(f"[Access Denied] Assinatura inativa: {user.username}")
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="‚ö†Ô∏è Assinatura inativa ou expirada."
        )
    return user

# === üü£ Requer plano gratuito (Free) ===
def require_free_plan(user: User = Depends(get_current_user)) -> User:
    if user.email == ADMIN_EMAIL or user.role == UserRole.ADMIN:
        return user
    if not user.plan or user.plan.name.lower() != "free":
        logger.warning(f"[Access Denied] N√£o √© free: {user.username} ({user.plan.name if user.plan else 'Nenhum'})")
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="üîê Este recurso √© exclusivo para usu√°rios do plano gratuito."
        )
    return user
