import os
import logging
from datetime import datetime
from fastapi import APIRouter, Depends, HTTPException
from fastapi.responses import StreamingResponse
from sqlalchemy.orm import Session

from app.database import get_db
from app.auth.dependencies import require_role
from app.models.user import User, UserRole
from app.services.transaction_reports import (
    generate_transaction_report_csv,
    generate_user_activity_report_csv
)
from app.api.error_response import ErrorResponse

# === Logger ===
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# === Router ===
router = APIRouter(prefix="/admin", tags=["Admin Reports"])

# === Utilit√°rio: Streaming de CSV ===
def stream_csv_file(temp_file_path: str, filename: str):
    if not os.path.exists(temp_file_path):
        logger.error(f"‚ùå Arquivo n√£o encontrado: {temp_file_path}")
        raise HTTPException(status_code=404, detail="Arquivo de relat√≥rio n√£o encontrado.")

    return StreamingResponse(
        open(temp_file_path, "rb"),
        media_type="text/csv",
        headers={"Content-Disposition": f"attachment; filename={filename}"}
    )

# === ROTA: Relat√≥rio de transa√ß√µes ===
@router.get(
    "/reports/transactions",
    summary="üìÑ Relat√≥rio de transa√ß√µes (CSV)",
    responses={403: {"model": ErrorResponse}, 500: {"model": ErrorResponse}},
)
def generate_transaction_report(
    db: Session = Depends(get_db),
    current_user: User = Depends(require_role(UserRole.ADMIN))
):
    """
    Gera e retorna um arquivo CSV com dados de transa√ß√µes.
    Requer permiss√£o de administrador.
    """
    try:
        temp_file_path = generate_transaction_report_csv(db)
        filename = f"transaction_report_{datetime.utcnow().strftime('%Y%m%d%H%M%S')}.csv"
        logger.info(f"üìÅ [admin:{current_user.id}] Gerou relat√≥rio de transa√ß√µes.")
        return stream_csv_file(temp_file_path, filename)
    except Exception as e:
        logger.error(f"‚ùå Erro ao gerar relat√≥rio de transa√ß√µes: {e}")
        raise HTTPException(status_code=500, detail="Erro ao gerar o relat√≥rio de transa√ß√µes.")

# === ROTA: Relat√≥rio de atividade de usu√°rios ===
@router.get(
    "/reports/user-activity",
    summary="üïµÔ∏è Relat√≥rio de atividades de usu√°rios (CSV)",
    responses={403: {"model": ErrorResponse}, 500: {"model": ErrorResponse}},
)
def generate_user_activity_report(
    db: Session = Depends(get_db),
    current_user: User = Depends(require_role(UserRole.ADMIN))
):
    """
    Gera e retorna um arquivo CSV com atividades de usu√°rios.
    Requer permiss√£o de administrador.
    """
    try:
        temp_file_path = generate_user_activity_report_csv(db)
        filename = f"user_activity_report_{datetime.utcnow().strftime('%Y%m%d%H%M%S')}.csv"
        logger.info(f"üìÅ [admin:{current_user.id}] Gerou relat√≥rio de atividades de usu√°rios.")
        return stream_csv_file(temp_file_path, filename)
    except Exception as e:
        logger.error(f"‚ùå Erro ao gerar relat√≥rio de atividades de usu√°rios: {e}")
        raise HTTPException(status_code=500, detail="Erro ao gerar o relat√≥rio de atividades de usu√°rios.")
