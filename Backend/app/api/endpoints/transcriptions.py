# üìÅ backend/app/api/endpoints/transcriptions.py

import os
import logging
from uuid import uuid4
from pathlib import Path

from fastapi import APIRouter, UploadFile, File, HTTPException
from pydantic import BaseModel, Field

from app.config import settings
from app.tasks import transcribe_video_task
from app.api.error_response import ErrorResponse

router = APIRouter(prefix="/transcriptions")
logger = logging.getLogger(__name__)

# === üì¶ Schemas ===

class TranscriptionRequest(BaseModel):
    video_id: str = Field(..., description="Nome do v√≠deo existente no TMP_DIR")

class TranscriptionResponse(BaseModel):
    task_id: str = Field(..., description="ID da tarefa Celery iniciada")
    message: str = Field(..., description="Mensagem de status")

# === üìΩÔ∏è Transcri√ß√£o de v√≠deo existente ===

@router.post(
    "/",
    response_model=TranscriptionResponse,
    responses={500: {"model": ErrorResponse}, 404: {"model": ErrorResponse}},
    tags=["Transcri√ß√£o"]
)
async def request_transcription(request: TranscriptionRequest):
    """
    Inicia a transcri√ß√£o de um v√≠deo j√° salvo localmente no TMP_DIR.
    """
    video_path = os.path.join(settings.TMP_DIR, request.video_id)
    if not os.path.exists(video_path):
        logger.warning(f"üìÇ V√≠deo n√£o encontrado: {request.video_id}")
        raise HTTPException(status_code=404, detail="V√≠deo n√£o encontrado.")

    try:
        task = transcribe_video_task.delay(video_path)
        logger.info(f"üì§ Transcri√ß√£o iniciada | Arquivo: {request.video_id} | Task ID: {task.id}")
        return TranscriptionResponse(task_id=task.id, message="Transcri√ß√£o iniciada.")
    except Exception as e:
        logger.exception(f"Erro ao iniciar transcri√ß√£o para {request.video_id}: {e}")
        raise HTTPException(status_code=500, detail="Erro ao iniciar a transcri√ß√£o.")

# === üì§ Upload + Transcri√ß√£o ===

@router.post(
    "/upload",
    response_model=TranscriptionResponse,
    responses={400: {"model": ErrorResponse}, 500: {"model": ErrorResponse}},
    tags=["Transcri√ß√£o"]
)
async def request_transcription_upload(file: UploadFile = File(...)):
    """
    Faz upload de um v√≠deo e inicia transcri√ß√£o autom√°tica.
    """
    ext = Path(file.filename).suffix.lower().strip(".")
    if ext not in settings.ALLOWED_VIDEO_EXTENSIONS:
        logger.warning(f"Extens√£o inv√°lida: {file.filename}")
        raise HTTPException(status_code=400, detail="Formato de v√≠deo n√£o suportado.")

    try:
        unique_filename = f"{uuid4()}.{ext}"
        file_path = os.path.join(settings.TMP_DIR, unique_filename)
        os.makedirs(settings.TMP_DIR, exist_ok=True)

        with open(file_path, "wb") as f_out:
            while chunk := await file.read(1024 * 1024):
                f_out.write(chunk)

        logger.info(f"üì• Upload recebido: {unique_filename}. Iniciando transcri√ß√£o.")
        task = transcribe_video_task.delay(file_path)

        return TranscriptionResponse(
            task_id=task.id,
            message="Transcri√ß√£o iniciada com sucesso."
        )
    except Exception as e:
        logger.exception(f"Erro ao processar v√≠deo para transcri√ß√£o: {e}")
        raise HTTPException(status_code=500, detail="Erro ao processar o v√≠deo.")
