# üìÅ app/utils/file_utils.py

import logging
import os
import shutil
from typing import Optional
from uuid import uuid4

logger = logging.getLogger(__name__)

TEMP_DIR = "/tmp/elgn_ai_temp"


# === ‚úÖ Garante que o diret√≥rio tempor√°rio exista ===
def ensure_temp_dir_exists() -> None:
    """Cria o diret√≥rio tempor√°rio se ele ainda n√£o existir."""
    try:
        os.makedirs(TEMP_DIR, exist_ok=True)
    except Exception as e:
        logger.exception(f"‚ùå Falha ao criar diret√≥rio tempor√°rio: {e}")
        raise


# === üóëÔ∏è Remove uma pasta inteira ===
def remove_dir(path: str) -> None:
    """Remove o diret√≥rio informado, se existir."""
    if os.path.exists(path) and os.path.isdir(path):
        shutil.rmtree(path)
        logger.info(f"üìÅ Diret√≥rio removido: {path}")


# === üìÑ Remove um √∫nico arquivo ===
def remove_file(path: str) -> None:
    """Remove um arquivo espec√≠fico, se existir."""
    try:
        if os.path.exists(path):
            os.remove(path)
            logger.info(f"üóëÔ∏è Arquivo removido: {path}")
    except Exception as e:
        logger.exception(f"‚ùå Erro ao remover arquivo {path}: {e}")


# === üßº Limpa arquivos tempor√°rios (filtrando por extens√£o) ===
def clear_temp_dir(filter_ext: Optional[str] = None) -> None:
    """Remove arquivos do diret√≥rio tempor√°rio, com ou sem filtro por extens√£o."""
    try:
        if os.path.exists(TEMP_DIR):
            for filename in os.listdir(TEMP_DIR):
                path = os.path.join(TEMP_DIR, filename)
                if os.path.isfile(path) and (
                    not filter_ext or filename.endswith(filter_ext)
                ):
                    os.remove(path)
            logger.info(f"üßπ Diret√≥rio tempor√°rio limpo: {TEMP_DIR}")
    except Exception as e:
        logger.exception(
            f"‚ùå Erro ao limpar diret√≥rio tempor√°rio {TEMP_DIR}: {e}"
        )


# === üìç Gera caminho de arquivo √∫nico para uso tempor√°rio ===
def generate_temp_file_path(ext: str = "mp4") -> str:
    """Gera um caminho √∫nico no diret√≥rio TEMP_DIR com a extens√£o especificada."""
    ensure_temp_dir_exists()
    temp_path = os.path.join(TEMP_DIR, f"{uuid4()}.{ext}")
    logger.debug(f"üìÑ Caminho tempor√°rio gerado: {temp_path}")
    return temp_path


# === üíæ Verifica espa√ßo livre (em MB) ===
def get_free_disk_space_mb(path: str = "/") -> float:
    """Retorna o espa√ßo livre no disco (em MB)."""
    try:
        statvfs = os.statvfs(path)
        return round((statvfs.f_frsize * statvfs.f_bavail) / (1024 * 1024), 2)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Erro ao verificar espa√ßo em disco: {e}")
        return 0.0


# === üì¶ Exporta√ß√µes ===
__all__ = [
    "ensure_temp_dir_exists",
    "remove_dir",
    "remove_file",
    "clear_temp_dir",
    "generate_temp_file_path",
    "get_free_disk_space_mb",
]
