# üìÅ app/auth/jwt.py

from datetime import datetime, timedelta
from jose import jwt, JWTError, ExpiredSignatureError
import logging

from app.config import settings

# === üîê Configura√ß√µes ===
logger = logging.getLogger(__name__)

SECRET_KEY = settings.secret_key
ALGORITHM = settings.algorithm
ACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes

if not SECRET_KEY:
    logger.critical("‚ùó SECRET_KEY n√£o est√° definida. Isso √© extremamente inseguro em produ√ß√£o!")

# === üîê Fun√ß√£o para criar token de acesso ===
def create_access_token(data: dict, expires_delta: timedelta = None) -> str:
    """
    Cria e retorna um token JWT v√°lido por um tempo definido.
    Tempo padr√£o: 60 minutos (ou conforme configurado).
    """
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    token = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    logger.info("‚úÖ Token de acesso JWT gerado com sucesso.")
    return token

# === üîê Fun√ß√£o para decodificar token ===
def decode_access_token(token: str) -> dict:
    """
    Decodifica o token JWT e retorna o payload.
    Lan√ßa erro se o token estiver expirado ou for inv√°lido.
    """
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        if not isinstance(payload, dict) or "sub" not in payload:
            logger.warning("‚ö†Ô∏è Token JWT decodificado sem campo 'sub'.")
            raise JWTError("Token inv√°lido: campo 'sub' ausente.")
        logger.info(f"üîì Token decodificado com sucesso. sub={payload.get('sub')}")
        return payload
    except ExpiredSignatureError:
        logger.warning("‚è∞ Token expirado.")
        raise JWTError("Token expirado.")
    except JWTError as e:
        logger.warning(f"üö´ Token inv√°lido: {e}")
        raise
